import random
import math
import matplotlib.pyplot as plt

#lightAmount is the amount of light particles you want to spawn in
#stepAmount is how long you want to draw the light particle
lightAmount = 20
stepAmount = 50

#These lists are necessary for inserting the light
lightListX = []
lightListY = []

#Some global properties(globDegrees = starting angle of light)
globDegrees = -90
globMirrorx = -1
globMirrory = 0
globMirrordx = 0.001
xintersect = 0
#Determines the steepness of the mirror, higher is steeper, reccomended value = 0.1
steep = 0.1
#Determines the coarse of the mirror, recommended 0 or really low like 10^-5
coarse = 0 * 10**-5

#globMirrorLength determines the length of the mirror
globMirrorLength = 4

#globCounter is used to see if the reflection has already taken place(0 = not reflected, 1 = reflected)
globCounter = 0
globCounter2 = 0
#plt.gca().set_color_cycle(['blue']) #Is used to give the graph a specific color #python3.5 only

#Function for defining the light particles
def initia_light_particles (aantal_light_particles):
   list_inita_light_particles=[]
   for p in range(0,aantal_light_particles):
       light_particle={"x_location":2/lightAmount * p,"y_location": 2 ,"angle": math.radians(globDegrees+0.00001),"speed": 0.1}
       list_inita_light_particles.append(light_particle)
   return list_inita_light_particles

#Function for calculating the movement of light in the x axis
def movementPeriodX(x, speed, angle):
  dx = speed * math.cos(angle)
  x = x + dx
  return x

#Function for calculating the movement of light in the y axis  
def movementPeriodY(y, speed, angle):
  dy = speed * math.sin(angle)
  y = (y + dy)
  return y  

#Function for defining the function of the mirror: insert the function for mirror in the yVal variable.
def mirrorFunction(xVal):
  yVal = steep*(xVal-1)**2 + (random.random()-0.5) * coarse
  return yVal

def intersectionLM(startB,startD,hellingA,hellingC):
  intersectPointX = (startB-startD)/(hellingA-hellingC)
  return intersectPointX

#This function makes the mirror visible as a line
def drawMirrorLine():
  mirrorx = globMirrorx
  mirrordx = globMirrordx
  mirrory = globMirrory
  mirrorLineX = []
  mirrorLineY = []
  for l in range (int(round(globMirrorLength/globMirrordx))):
      mirrory = mirrorFunction(mirrorx)
      mirrorLineX.append(mirrorx)
      mirrorLineY.append(mirrory)
      mirrorx = mirrorx + mirrordx 
  plt.plot(mirrorLineX, mirrorLineY)

#Function that returns the angle of the mirror in a small area  
def giveMirrorAngle(xVal):
  dMirrory = mirrorFunction(xVal + globMirrordx) - mirrorFunction(xVal)
  nAngle = math.atan(dMirrory/globMirrordx)
  return nAngle

#Gives the light a new angle which correspponds with the law of reflection
def mirrorReflection(ry, mirrorAngle, lightAngle, rx):
  global globCounter
  global xintersect
  global globCounter2
  #If the y of the light particle is lower than the y of the mirror it needs to reflect
  if movementPeriodY(lightBeamsY, lightBeamsSpeed, lightBeamsAngle) <= mirrorFunction(rx) and globCounter == 0:
    rAngle = 2 * mirrorAngle - lightAngle
    globCounter = 1
    a = (movementPeriodY(lightBeamsY, lightBeamsSpeed, lightBeamsAngle)-ry)/(movementPeriodX(lightBeamsX, lightBeamsSpeed, lightBeamsAngle)-rx)
    b = ry - a * rx
    c = (mirrorFunction(rx)-mirrorFunction(movementPeriodX(lightBeamsX, lightBeamsSpeed, lightBeamsAngle)))/(movementPeriodX(lightBeamsX, lightBeamsSpeed, lightBeamsAngle)-rx)
    d = mirrorFunction(rx) - c * rx
    xintersect = (d-b)/(a-c)
    globCounter2 = 1
    return rAngle
  if movementPeriodY(lightBeamsY, lightBeamsSpeed, lightBeamsAngle) >= mirrorFunction(rx):
    globCounter = 0
    globCounter2 = 0
  return lightAngle

light_beams = initia_light_particles(lightAmount)
drawMirrorLine()

for c in range(0,lightAmount):
  lightBeamsTemp = light_beams[c]
  lightBeamsX = lightBeamsTemp["x_location"]
  lightBeamsY = lightBeamsTemp["y_location"]
  lightBeamsSpeed = lightBeamsTemp["speed"]
  lightBeamsAngle = lightBeamsTemp["angle"]
  for q in range (stepAmount):
    lightBeamsAngle = mirrorReflection(lightBeamsY, giveMirrorAngle(lightBeamsX), lightBeamsAngle,lightBeamsX)
    if globCounter2 == 0:
      lightBeamsX = movementPeriodX(lightBeamsX, lightBeamsSpeed, lightBeamsAngle)
      lightBeamsY = movementPeriodY(lightBeamsY, lightBeamsSpeed, lightBeamsAngle)
    else:
      lightBeamsX = xintersect
      lightBeamsY = mirrorFunction(xintersect)
    lightListX.append(lightBeamsX)
    lightListY.append(lightBeamsY)
  globCounter = 0
  plt.plot(lightListX, lightListY)
  del lightListX[:]  
  del lightListY[:]
  
#plt.xlim(0,3)
#plt.ylim(0,3)
plt.show()
